// Generated by CoffeeScript 1.3.3
var global, modify;

TestCase("Function Test", {
  "test function length property": function() {
    assertEquals(2, assert.length);
    assertEquals(0, document.getElementById.length);
    assertEquals(0, console.log.length);
  },
  "test scope": function() {
    var sum;
    sum = function() {
      var func, i, total, _i, _ref;
      assertUndefined(i);
      func = function() {
        assertUndefined(someVar);
      };
      assertException(func, "ReferenceError");
      total = arguments[0];
      if (arguments.length > 1) {
        for (i = _i = 1, _ref = arguments.length; 1 <= _ref ? _i < _ref : _i > _ref; i = 1 <= _ref ? ++_i : --_i) {
          total += arguments[i];
        }
      }
      assertEquals(5, i);
      return total;
    };
    sum(1, 2, 3, 4, 5);
  }
});

modify = function(a, b) {
  b = 42;
  arguments[0] = arguments[1];
  return a;
};

TestCase("Formal Parameters Arguments Test", {
  "test dynamic relationship": function() {
    assertEquals(42, modify(1, 2));
  },
  "test no dynamic mapping for missing parameters": function() {
    assertUndefined(modify(1));
  }
});

global = this;

TestCase("Global Object Test", {
  "test window should be global object": function() {
    assertSame(global, window);
    assertSame(global.window, window);
    assertSame(window.window, window);
  }
});
